layout (local_size_variable) in;

layout (std430, binding = 0) readonly buffer Input {
    int values[];
} inputBin;

// layout (std430, binding = 1) buffer Occupancy {
//     int values[];
// } occupancy;

layout (std430, binding = 1) buffer Output {
    int values[];
} outputBin;

uniform int _nBins;
uniform int _nDimensions;
uniform int _nClusters;

uniform int INT_MAX;

int getValue(int bin, int dim) {
    return inputBin.values[dim * _nBins + bin];
}

void setValue(int bin, int dim, int value) {
    outputBin.values[dim * _nBins + bin] = value;
}

bool isOccupied(int bin, int dim) {
    return (outputBin.values[dim * _nBins + bin] == 1);
}

void occupy(int bin, int dim) {
    outputBin.values[dim * _nBins + bin] = 1;
}

void main() {
    // For all clusters
    //  Find maximum value for all that has not yet been marked
    //  Mark the maximum and all values downhill until it goes uphill
    int dim = int(gl_GlobalInvocationID.x);

    for (int c; c < _nClusters; ++c) {
        // Find the current non-occupied maximum
        int max = -INT_MAX;
        int maxBin = -1;
        for (int i = 0; i < _nBins; ++i) {
            bool occupied = isOccupied(i, dim);

            if (!occupied) {
                int value = getValue(i, dim);
                if (value > max) {
                    max = value;
                    maxBin = i;
                }
            }
        }

        // Traverse to the left
        int oldValue = max;
        for (int i = maxBin; i >= 0; --i) {
            int currentValue = getValue(i, dim);
            if (currentValue <= oldValue) {
                occupy(i, dim);
                oldValue = currentValue;
            }
            else
                break;
        }

        // Traverse to the right
        oldValue = max;
        for (int i = maxBin; i < _nBins; ++i) {
            int currentValue = getValue(i, dim);
            if (currentValue <= oldValue) {
                occupy(i, dim);
                oldValue = currentValue;
            }
            else
                break;
        }
    }
}





    // number of workgroups = number of bins    -> gl_WorkGroupID.x = bin
    // number of items in workgroup = number of dimensions    -> gl_LocalInvocationID.x = dimension


    // First, get the min/max for all bins in the current dimension
    // int min = INT_MAX;
    // int max = -INT_MAX;
    // for (int i = 0; i < _nDimensions; ++i) {
    //     int value = getValue(int(gl_WorkGroupID.x), i);
    //     if (value < min)
    //         min = value;
    //     if (value > max)
    //         max = value;
    // }

    // int v = getValue(int(gl_WorkGroupID.x), int(gl_LocalInvocationID.x));
    // float normalized = (float(v) - float(min)) / (float(max) - float(min));

    // if (normalized >= _percentage)
    //     setValue(int(gl_WorkGroupID.x), int(gl_LocalInvocationID.x), 1);
    // else
    //     setValue(int(gl_WorkGroupID.x), int(gl_LocalInvocationID.x), 0);
// }
