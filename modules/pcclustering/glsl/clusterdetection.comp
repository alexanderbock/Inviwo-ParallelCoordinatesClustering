layout (local_size_variable) in;

layout (std430, binding = 0) readonly buffer Bins {
    int data[];
} bins;

layout (std430, binding = 1) writeonly buffer Identifiers {
    int data[];
} identifiers;

uniform int _nBins;
uniform int _nDimensions;
uniform int _selectedDimension;

bool isBinOccupied(int index, int dimension, const int nBins) {
    return (bins.data[dimension * nBins + index] == 1);
}

void main() {
    // We are going from the top to the bottom
    // Whenever we encounter a non-occupied bin, we reset the
    // current connected components
    int currentID = 0;
    bool isInConnectedComponent = false;
    for (int i = 0; i < _nBins; ++i) {
        bool isOccupied = isBinOccupied(i, _selectedDimension, _nBins);

        if (isOccupied) {
            if (isInConnectedComponent) {
                identifiers.data[i] = currentID;
            }
            else {
                currentID += 1;
                identifiers.data[i] = currentID;
                isInConnectedComponent = true;
            }
        }
        else {
            identifiers.data[i] = -1;
            isInConnectedComponent = false;
        }
    }
}
