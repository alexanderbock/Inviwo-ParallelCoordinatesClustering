layout (local_size_variable) in;

layout (std430, binding = 0) readonly buffer Input {
    int values[];
} inputBin;

layout (std430, binding = 1) buffer Output {
    int values[];
} outputBin;

uniform int _nBins;
uniform int _nDimensions;
uniform float _percentage;
uniform int INT_MAX;

int getValue(int bin, int dim) {
    return inputBin.values[dim * _nBins + bin];
}

void setValue(int bin, int dim, int value) {
    outputBin.values[dim * _nBins + bin] = value;
}

void main() {
    // number of workgroups = number of bins    -> gl_WorkGroupID.x = bin
    // number of items in workgroup = number of dimensions    -> gl_LocalInvocationID.x = dimension


    // First, get the min/max for all bins in the current dimension
    int min = INT_MAX;
    int max = -INT_MAX;
    for (int i = 0; i < _nDimensions; ++i) {
        int value = getValue(int(gl_WorkGroupID.x), i);
        if (value < min)
            min = value;
        if (value > max)
            max = value;
    }

    int v = getValue(int(gl_WorkGroupID.x), int(gl_LocalInvocationID.x));
    float normalized = (float(v) - float(min)) / (float(max) - float(min));

    if (normalized >= _percentage)
        setValue(int(gl_WorkGroupID.x), int(gl_LocalInvocationID.x), 1);
    else
        setValue(int(gl_WorkGroupID.x), int(gl_LocalInvocationID.x), 0);
}
