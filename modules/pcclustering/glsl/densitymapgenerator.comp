layout (local_size_variable) in;

layout (std430, binding = 0) readonly buffer Values {
    float data[];
} values;

layout (std430, binding = 1) buffer OutputValues {
    int values[];
} outputValues;

uniform int _nBins;
uniform int _nDimensions;

// Returns 0-based dimensions between [0, _nDimensions - 1] for a GID
int getDimension(int gid) {
    return gid % _nDimensions;
}

float getValue(int gid) {
    return values.data[gid];
}

int getBinIndex(float value) {
    const float rangeScaleFactor = (_nBins - 1.0) / 2.0;
    return int((value + 1.0) * rangeScaleFactor);
}

void incrementBin(int bin, int dim) {
    atomicAdd(
        outputValues.values[dim * _nBins + bin],
        1
    );
}

void main() {
    // gl_GlobalInvocationID.x \in [0, _nBins - 1]
    const int gid = int(gl_GlobalInvocationID.x);

    const int dim = getDimension(gid);
    const float value = getValue(gid);
    const int bin = getBinIndex(value);

    incrementBin(bin, dim);
}