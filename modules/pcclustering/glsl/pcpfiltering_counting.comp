layout (local_size_variable) in;

layout (binding = 0, offset = 0) uniform atomic_uint positiveAccumulation;
layout (binding = 0, offset = 4) uniform atomic_uint negativeAccumulation;

layout (std430, binding = 1) readonly buffer MinMaxValues {
    // min/max .. min/max .. min/max .....
    float values[];
} minMaxValues;

layout (std430, binding = 2) readonly buffer Values {
    float data[];
} values;

layout (std430, binding = 3) readonly buffer Bins {
    int data[];
} bins;

uniform int _nBins;
uniform int _nDimensions;

float normalizeValue(float value, int dimension) {
    const vec2 minMax = vec2(
        minMaxValues.values[dimension * 2],
        minMaxValues.values[dimension * 2 + 1]
    );

    return (value - minMax.x) / (minMax.y - minMax.x);
}

int getBinIndex(float value) {
    return int(floor(value * _nBins));
}

bool isBinOccupied(int index, int dimension) {
    return (bins.data[dimension * _nBins + index] == 1);
}

float getValue(int id, int dim) {
    return values.data[id * _nDimensions + dim];
}

void main() {
    // gl_GlobalInvocationID.x \in [0, _nValues / _nDimensions]
    bool isValidDataPoint = true;
    for (int dimension = 0; dimension < _nDimensions; ++dimension) {
        float value = getValue(int(gl_GlobalInvocationID), dimension);
        float normalizedValue = normalizeValue(value, dimension);
        int binIndex = getBinIndex(normalizedValue);
        bool isValid = isBinOccupied(binIndex, dimension);
        isValidDataPoint = isValidDataPoint && isValid;
    }

    if (isValidDataPoint)
        atomicCounterIncrement(positiveAccumulation);
    else
        atomicCounterIncrement(negativeAccumulation);
}