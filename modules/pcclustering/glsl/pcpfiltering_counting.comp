layout (local_size_variable) in;

layout (binding = 0, offset = 0) uniform atomic_uint positiveAccumulation;

layout (std430, binding = 1) readonly buffer Values {
    float data[];
} values;

layout (std430, binding = 2) readonly buffer Bins {
    int data[];
} bins;

uniform int _nBins;
uniform int _nDimensions;
uniform uint _dimensionMask;
uniform int _nValues;

int getBinIndex(float value, const int nBins) {
    return int(floor(((value + 1.0) / 2.0) * nBins));
}

bool isBinOccupied(int index, int dimension, const int nBins) {
    return (bins.data[dimension * nBins + index] == 1);
}

float getValue(int id, int dim, const int nDimensions) {
    return values.data[id * nDimensions + dim];  
}

void main() {
    if ((gl_GlobalInvocationID.x * _nDimensions) >= _nValues)
        return;

    // gl_GlobalInvocationID.x \in [0, _nValues / _nDimensions]
    bool isValidDataPoint = true;
    for (int dimension = 0; dimension < _nDimensions; ++dimension) {
        uint useDimension = bitfieldExtract(_dimensionMask, dimension, 1);
        if (useDimension == 0)
            continue;

        float value = getValue(int(gl_GlobalInvocationID), dimension, _nDimensions);
        int binIndex = getBinIndex(value, _nBins);
        bool isValid = isBinOccupied(binIndex, dimension, _nBins);
        isValidDataPoint = isValidDataPoint && isValid;
    }

    if (isValidDataPoint)
        atomicCounterIncrement(positiveAccumulation);
}